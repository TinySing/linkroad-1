<template>
  <!--主体背景部分-->
  <div class="monitor_main">
    <p>当前位置：监控信息</p>
    <!--<el-button class="comBack" @click="comHome">返回总览</el-button>-->
    <!--上半部分-->
    <div class="monitor_msg">
      <!--<div class="main-content">-->
      <div class="leftBox" style="width:26.4%;float:left;margin-left:8%;position: relative;">
        <!--监控项分类选择器-->
        <i class="one">监控项分类:</i>
        <el-select v-model="valueOne" placeholder="请选择" @change="togDisabled(valueOne,valueTwoCopy)"
                   :style={zIndex:1}>
          <el-option
            v-for="item in optionsOne"
            :key="item.valueOne"
            :label="item.labelOne"
            :value="item.valueOne">
          </el-option>
        </el-select>
        <br>
        <!--弹窗列表+输入框-->
        <i class="three">请选择系统:</i>
        <!--选择系统输入框-->
        <el-button
          style="background-color: rgba(255,255,255,.1);position: absolute;top:56px;width:195px;border: none;height: 30px;"
          @click="centerDialog = true"></el-button>
        <div style="display: inline-block" @click="centerDialog = true">
          <input placeholder="点击选择系统"
                 class="system"
                 type="text"
                 id="indexText"
                 value=""
                 disabled
                 v-model="indexText"
          />
        </div>
        <i class="el-icon-circle-close" @click="empty"></i>
        <!--点击出现弹窗列表-->
        <el-dialog
          title="请选择您的系统"
          :visible.sync="centerDialog"
          :close-on-click-modal="false"
          width="633"
          center>
          <!--列表-->
          <div class="diaBox">
            <el-input class="search" type="text" v-model="searchData" placeholder="系统编号/系统名称"></el-input>
            <el-button size="middle" type="primary" @click="search"
                       style="float:left;margin-left: 10px;padding: 6px 15px;margin-top:3px;">搜索
            </el-button>
            <el-button size="middle" type="primary" @click="reset"
                       style="float:left;margin-left: 10px;padding: 6px 15px;margin-top:3px;">重置
            </el-button>
            <!--style="width: 601px;margin-left: 14px;"-->
            <el-table
              :header-cell-style="{background:'#f0f5f9',color:'#666'}"
              border
              :data="sysList"
            >
              <el-table-column
                prop="sysCode"
                label="系统编号"
              >
              </el-table-column>
              <el-table-column
                prop="sysName"
                label="系统名称"
              >
              </el-table-column>
              <el-table-column
                prop="handle"
                label="操作"
              >
                <template slot-scope="scope">
                  <el-button @click="choose(scope.$index,sysList)" type="text" size="small"
                             style="cursor: pointer;font-family: '黑体';font-size: 16px;">
                    √
                  </el-button>
                </template>
              </el-table-column>
            </el-table>
          </div>
          <span slot="footer" class="dialog-footer">
           <!--弹窗上的分页-->
          <div class="block" style="margin-left: auto;">
            <el-pagination
              @current-change="handleCurrentChange"
              :current-page="currentPage"
              :page-size="pageSize"
              layout="total,prev,pager, next"
              :total="total">
            </el-pagination>
          </div>
        </span>
        </el-dialog>
      </div>
      <div class="middleBox" style="width:25%;float:left;margin-left:6%;">
        <!--日期插件-->
        <div class="block" style="padding-top:4px;">
          <span class="demonstration">日期:</span>
          <el-date-picker
            v-model="valueData"
            type="daterange"
            value-format="yyyy-MM-dd HH:mm:ss"
            range-separator="至"
            start-placeholder="开始日期"
            end-placeholder="结束日期"
            :picker-options="pickerOptions"
            @change="changeDay(valueData)">
          </el-date-picker>
        </div>
        <!--设备IP选择器-->
        <i class="four">设备IP:</i>
        <el-select :disabled="changeDisabled" v-model="valueThree" placeholder="请选择" @change="change3(valueThree)"
                   style="width: 230px;">
          <el-option
            v-for="item in optionsThree"
            :key="item.valueThree"
            :label="item.labelThree"
            :value="item.labelThree"
          >
          </el-option>
        </el-select>
      </div>
      <div class="RightBox" style="width:25.3%;float:left;margin-left:7.5%;">
        <!--监控维度选择器-->
        <i class="two">监控维度:</i>
        <el-select v-model="valueTwo" :class="{'great':isActive}" placeholder="请选择" @click.native="warnSystem()"
                   @change="change2(valueTwo)">
          <el-option
            v-for="item in optionsTwo"
            :key="item.valueTwo"
            :label="item.labelTwo"
            :value="item.valueTwo">
          </el-option>
        </el-select>
        <el-select v-model="valueTwoCopy" :class="{'great':isActiveCopy}"
                   placeholder="请选择"
                   @change="change2Copy(valueTwoCopy)">
          <el-option
            v-for="item in optionsTwoCopy"
            :key="item.valueTwoCopy"
            :label="item.labelTwo"
            :value="item.valueTwoCopy">
          </el-option>
        </el-select>
        <br>
        <!--时间选择器-->
        <i class="five">时间:</i>
        <el-select :disabled="changeDisabledTime" v-model="valueFour" placeholder="请选择" @change="change4(valueFour)">
          <el-option
            v-for="item in optionsFour"
            :key="item.valueFour"
            :label="item.labelFour"
            :value="item.valueFour">
          </el-option>
        </el-select>
      </div>
      <!--</div>-->
    </div>
    <!--下半部分-->
    <div class="monitor_echarts" style="padding:3vh 15px 0">
      <div class="divDB" :style={display:selectDB}>
        <el-select v-model="valueDB" placeholder="请选择" @change="changeDB(valueDB)" :style={zIndex:1}>
          <el-option
            v-for="item in optionsDB"
            :key="item.valueDB"
            :label="item.label"
            :value="item.valueDB">
          </el-option>
        </el-select>
        <i style="display:block;float: right;line-height: 30px">增删改查：</i>
      </div>
      <el-table :header-cell-style="{background:'#f0f5f9',color:'#666'}"
                :data="tableData.slice((currentPageOne-1)*pageSizeOne,currentPageOne*pageSizeOne)"
                border
                empty-text="暂无数据"
                :style="{display:displayB}"
                style="font-size:12px;height:40vh;min-height:250px;overflow: auto;"
                header-row-class-name="tableHead"
      >
        <el-table-column
          prop="appCode"
          label="系统编号"
          align="center">
        </el-table-column>
        <el-table-column
          prop="jobId"
          label="任务ID"
          align="center">
        </el-table-column>
        <el-table-column
          prop="jobName"
          label="任务名称"
          align="center">
        </el-table-column>
        <el-table-column
          prop="startTime"
          label="开始时间"
          align="center">
        </el-table-column>
        <el-table-column
          prop="endTime"
          label="结束时间"
          align="center">
        </el-table-column>
        <el-table-column
          prop="runTime"
          label="任务时长"
          align="center">
        </el-table-column>
        <el-table-column
          prop="isSuccess"
          label="执行结果"
          align="center">
        </el-table-column>
      </el-table>
      <div class="block" :style="{display:displayB}" style="width:600px;height: 6vh;margin-top: 3vh;left:40vw;">
        <el-pagination
          background
          @size-change="handleSizeChangeOne"
          @current-change="handleCurrentChangeOne"
          :current-page="currentPageOne"
          :page-sizes="pageSizesOne"
          :page-size="pageSizeOne"
          layout="total,sizes,prev, pager, next, jumper"
          :total="totalOne">
        </el-pagination>
      </div>
      <el-table :header-cell-style="{background:'#f0f5f9',color:'#666'}"
                :data="tableDataTop.slice((currentPageOne-1)*pageSizeOne,currentPageOne*pageSizeOne)"
                border
                empty-text="暂无数据"
                :style="{display:displayC}"
                style="font-size:12px;height:40vh;min-height:250px;overflow: auto;"
                header-row-class-name="tableHead"
      >
        <el-table-column
          prop="appCode"
          label="系统编号"
          align="center">
        </el-table-column>
        <el-table-column
          prop="appName"
          label="系统名称"
          align="center">
        </el-table-column>
        <el-table-column
          prop="moudleName"
          label="子系统名称"
          align="center">
        </el-table-column>
        <el-table-column
          prop="sqlContent"
          label="SQL内容"
          align="center">
        </el-table-column>
        <el-table-column
          prop="caller"
          label="调用者"
          align="center">
        </el-table-column>
        <el-table-column
          prop="controlTime"
          label="调用时间"
          align="center">
        </el-table-column>
        <el-table-column
          prop="respTime"
          label="耗时"
          align="center">
        </el-table-column>
      </el-table>
      <div class="block" :style="{display:displayC}" style="width:600px;height: 6vh;margin-top: 3vh;left:40vw;">
        <el-pagination
          background
          @size-change="handleSizeChangeOne"
          @current-change="handleCurrentChangeOne"
          :current-page="currentPageOne"
          :page-sizes="pageSizesOne"
          :page-size="pageSizeOne"
          layout="total,sizes,prev, pager, next, jumper"
          :total="totalTwo">
        </el-pagination>
      </div>
      <el-table :header-cell-style="{background:'#f0f5f9',color:'#666'}"
                :data="tableDataRes.slice((currentPageOne-1)*pageSizeOne,currentPageOne*pageSizeOne)"
                border
                empty-text="暂无数据"
                :style="{display:displayD}"
                style="font-size:12px;height:40vh;min-height:250px;overflow: auto;"
                header-row-class-name="tableHead"
      >
        <el-table-column
          prop="appCode"
          label="系统编号"
          align="center">
        </el-table-column>
        <el-table-column
          prop="appName"
          label="系统名称"
          align="center">
        </el-table-column>
        <el-table-column
          prop="moudleName"
          label="子系统名称"
          align="center">
        </el-table-column>
        <el-table-column
          prop="uri"
          label="uri"
          align="center">
        </el-table-column>
        <el-table-column
          prop="average"
          label="平均请求时间"
          align="center">
        </el-table-column>
        <el-table-column
          prop="requestsNum"
          label="请求次数"
          align="center">
        </el-table-column>
      </el-table>
      <div class="block" :style="{display:displayD}" style="width:600px;height: 6vh;margin-top: 3vh;left:40vw;">
        <el-pagination
          background
          @size-change="handleSizeChangeOne"
          @current-change="handleCurrentChangeOne"
          :current-page="currentPageOne"
          :page-sizes="pageSizesOne"
          :page-size="pageSizeOne"
          layout="total,sizes,prev, pager, next, jumper"
          :total="totalThree">
        </el-pagination>
      </div>
      <div id="myChart" :style="{display:displayA,width:'82vw',height:'47vh',margin:'auto',marginTop:'5vh'}">
      </div>

    </div>
  </div>
</template>

<script>
  export default {
    name: "MonitorMsg",
    data() {
      return {
        startDate: '',//日期选择器的开始日期
        endDate: '',//日期选择器的结束日期
        obj: {},
        displayA: 'none',//折线图的画布
        displayB: 'block',//批处理列表的盒子
        displayC: 'none',//慢SQL列表top5的盒子
        displayD: 'none',//响应时间top5列表的盒子
        selectDB: 'none',
        // indexText: this.$route.params.id,
        indexText: '',
        nowSysCode: '',//当前系统编号
        ipCode: '',
        searchData: '',  // 实现搜索
        isActive: false,
        isActiveCopy: true,
        changeDisabled: true,
        changeDisabledTime: true,
        // 弹窗的分页
        total: null,
        currentPage: 1,
        pageSize: 8,
        // 下部分列表的分页
        totalOne: null,
        totalTwo: null,
        totalThree: null,
        currentPageOne: 1,
        pageSizeOne: 10,
        pageSizesOne: [10, 20, 30, 40, 50],
        centerDialog: false,
        valueOne: 'System',
        valueData: '',
        valueTwo: 'MonitorSeven',
        valueTwoCopy: 'D',
        valueThree: '',
        valueDB: 'INSERT',
        ipIndex: '',
        // labelThree:0,
        valueFour: 'TimeOne',
        //日期选择区间只能选择今天之前的近七天内
        pickerOptions: {
          disabledDate(time) {
            // 一天的毫秒数 = 8.64e7  判断时在return处可进行加减
            let curDate = (new Date()).getTime();
            let day = 7 * 24 * 3600 * 1000;
            let dateRegion = curDate - day;
            return time.getTime() > Date.now() - 8.64e7 || time.getTime() < dateRegion;
          },
        },
        LineData: [],
        dataY: [],
        //批处理的表格
        tableData: [],
        tableDataTop: [],
        tableDataRes: [],
        // 选择系统
        sysList: [],
        sysListOne: [],
        // 选择监控项分类
        optionsOne: [
          {
            valueOne: 'Equipment',
            labelOne: '设备级'
          },
          {
            valueOne: 'System',
            labelOne: '系统级'
          }],
        //选择监控维度
        optionsTwo: [
          {
            valueTwo: 'MonitorSeven',
            labelTwo: '批处理情况'
          },
          {
            valueTwo: 'APPLY',
            labelTwo: '应用吞吐率'
          },
          {
            valueTwo: 'E',
            labelTwo: '应用错误率'
          },
          {
            valueTwo: 'MonitorTwelve',
            labelTwo: '慢SQL操作top5'
          },
          {
            valueTwo: 'OTHER',
            labelTwo: 'DB吞吐率'
          },
          {
            valueTwo: 'R',
            labelTwo: '应用响应时间'
          },
          {
            valueTwo: 'Full',
            labelTwo: 'FullGC次数'
          },
          {
            valueTwo: 'Data',
            labelTwo: '数据源连接池使用率'
          },
          {
            valueTwo: 'MonitorNine',
            labelTwo: '响应时间top5'
          }
        ],
        optionsTwoCopy: [
          {
            valueTwoCopy: 'D',
            labelTwo: '磁盘空间'
          },
          {
            valueTwoCopy: 'C',
            labelTwo: 'cpu使用率'
          },
          {
            valueTwoCopy: 'M',
            labelTwo: '内存使用率'
          },
          // {
          //   valueTwoCopy: 'MonitorFour',
          //   labelTwo: '磁盘IO情况'
          // },
          // {
          //   valueTwoCopy: 'MonitorFive',
          //   labelTwo: 'Socket连接数'
          // },
          // {
        ],
        //选择设备IP
        optionsThree: [],
        optionsFour: [
          {
            valueFour: 'TimeOne',
            labelFour: '近5分钟',
          },
          {
            valueFour: 'TimeTwo',
            labelFour: '近30分钟',
          },
          {
            valueFour: 'TimeThree',
            labelFour: '近2小时',
          },
          {
            valueFour: 'TimeFour',
            labelFour: '近8小时'
          },
          {
            valueFour: 'TimeFive',
            labelFour: '近24小时'
          }
        ],
        childSystem: [],
        legendName: [],//子系统的名字
        legendId: [],//子系统的id
        optionsDB: [
          {
            valueDB: 'INSERT',
            label: '增',
          },
          {
            valueDB: 'DELETE',
            label: '删',
          },
          {
            valueDB: 'UPDATE',
            label: '改',
          },
          {
            valueDB: 'SELECT',
            label: '查',
          }
        ]
      }
    },
    methods: {
      // getChildCode() {
      //   //根据选择的系统获取对应的子系统
      //   let qs = require('qs')
      //   let informationNew = {"appCode": this.nowSysCode, "type": this.valueTwo};
      //   this.$axios.post('/monitorCon/applyError/queryMoudleId', qs.stringify(informationNew)).then((response) => {
      //
      //     for (let i = 0; i < response.data.length; i++) {
      //       this.childSystem.push({
      //         'moudleId': response.data[i]['moudleId'],
      //         'moudleName': response.data[i]['moudleName']
      //       });
      //     }
      //     // console.log(this.childSystem)
      //   });
      // },

      //日期选择器的方法
      changeDay(valueData) {
        if (valueData != null) {
          console.log(valueData)
          this.startDate = valueData[0];
          this.endDate = valueData[1]
          this.valueFour = ''
          this.changeDisabledTime = true;
        }
        if (valueData === null) {
          console.log(valueData)
          this.changeDisabledTime = true;
          this.startDate = '';
          this.endDate = '';
          this.valueFour = 'TimeOne'
        }
        //日期选择器传送开始日期和结束日期获取返回的批处理数据
        if (this.valueOne === 'System' && this.valueTwo === 'MonitorSeven') {
          this.batchData()
        }
        if (this.valueOne === 'System' && this.valueTwo === 'MonitorTwelve') {
          this.slowTop()
        }
        //日期选择器传送开始日期和结束日期获取返回的折线图
        this.drawLine()
      },
      comHome() {
        this.$router.push({
          path: '/index/home'
        })
      },
      //弹窗系统里的获取数据
      dialogData() {
        let qs = require('qs');
        let information = {"userId": ""};
        this.$axios.post('/monitorCon/system/userProject/queryProject', qs.stringify(information)).then((response) => {
          //session为空
          if (response === null) return
          this.sysList = [];
          //选择系统框是否默认显示第一条
          // this.indexText  = response.data[0]['projectname']
          for (let i = 0; i < response.data.length; i++) {
            this.sysList.push({
              'sysCode': response.data[i]['projectid'],
              'sysName': response.data[i]['projectname']
            });
          }
          // 获取数据之后的实际分页
          this.total = this.sysList.length;
          this.data = this.sysList
          this.searchList()
        });

      },
      // 获取批处理情况的数据
      batchData() {
        //解决如果在设备级选择系统时，再选择系统级时会把系统编号带过来
        // if(this.$route.params.idOne!=null&&this.nowSysCode===''){
        //从总览页传递参数进来，成为传给后台的系统编号
        // this.nowSysCode=this.$route.params.idOne
        // }

        // if (this.nowSysCode != null) {
        //   this.nowSysCode = sysList[index].sysCode
        // }
        let qs = require('qs');
        let information = {"systemId": this.nowSysCode, "starDate": this.startDate, "endDate": this.endDate};
        this.$axios.post('/monitorCon/dmMsg/query', qs.stringify(information)).then((response) => {
          // if(response.data === ""){
          //   this.emptyText = '暂无数据'
          //   return
          // }
          this.tableData = [];
          for (let i = 0; i < response.data.length; i++) {
            if (response.data[i]['isSuccess'] === 'Y') {
              response.data[i]['isSuccess'] = '成功'
            } else {
              response.data[i]['isSuccess'] = '失败'
            }
            this.tableData.push({
              'appCode': response.data[i]['appCode'],
              // 'appName': response.data[i]['appName'],
              'jobId': response.data[i]['jobId'],
              'jobName': response.data[i]['jobName'],
              'startTime': response.data[i]['startTime'],
              'endTime': response.data[i]['endTime'],
              'runTime': response.data[i]['runTime'],
              'isSuccess': response.data[i]['isSuccess']
            });
          }
          // console.log(response)
          // 获取数据之后的实际分页
          this.totalOne = this.tableData.length;
        });
        // console.log(this.nowSysCode)
      },
      //获取慢sql数据
      slowTop() {
        // let legendId = []
        // let legendName = []
        let qs = require('qs');
        let information = {
          'appCode': this.nowSysCode,
          'timeType': this.valueFour,
          'starDate': this.startDate,
          'endDate': this.endDate
        };
        //获取系统下慢Sql的子系统
        // let informationNew = {"appCode": this.nowSysCode, "type": this.valueTwo};
        // this.$axios.post(' /monitorCon/sqlTop/queryMoudleId', qs.stringify(informationNew)).then((response) => {
        //   if (this.childSystem != null) {
        //     this.childSystem = []
        //   }
        //   if (legendId != null) {
        //     legendId = []
        //   }
        //   for (let i = 0; i < response.data.length; i++) {
        //     this.childSystem.push({
        //       'moudleId': response.data[i]['moudleId'],
        //       'moudleName': response.data[i]['moudleName']
        //     });
        //     legendId.push(this.childSystem[i].moudleId)
        //     legendName.push(this.childSystem[i].moudleName)
        //   }
        //   console.log(legendName)
        //   console.log(response)
        // })
        this.$axios.post('/monitorCon/sqlTop/query', qs.stringify(information)).then((response) => {
          this.tableDataTop = [];
          for (let i = 0; i < response.data.length; i++) {
            if (response.data[i]['isSuccess'] === 'Y') {
              response.data[i]['isSuccess'] = '成功'
            } else {
              response.data[i]['isSuccess'] = '失败'
            }
            this.tableDataTop.push({
              'appCode': response.data[i]['appCode'],
              'appName': response.data[i]['appName'],
              'moudleName': response.data[i]['moudleName'],
              'sqlContent': response.data[i]['sqlContent'],
              'caller': response.data[i]['caller'],
              'controlTime': response.data[i]['controlTime'],
              'respTime': response.data[i]['respTime'],
            });
          }
          // console.log(response)
          this.totalTwo = this.tableDataTop.length;
        });

      },
      dataBase() {
        let qs = require('qs');
        let information = {
          'appCode': this.nowSysCode,
          'timeType': this.valueFour,
          'starDate': this.startDate,
          'endDate': this.endDate
        };
        this.$axios.post('/monitorCon/response/query', qs.stringify(information)).then((response) => {
          console.log(response)
          this.tableDataRes = [];
          for (let i = 0; i < response.data.length; i++) {
            if (response.data[i]['isSuccess'] === 'Y') {
              response.data[i]['isSuccess'] = '成功'
            } else {
              response.data[i]['isSuccess'] = '失败'
            }
            this.tableDataRes.push({
              'appCode': response.data[i]['appCode'],
              'appName': response.data[i]['appName'],
              'moudleName': response.data[i]['moudleName'],
              'uri': response.data[i]['uri'],
              'average': response.data[i]['average'],
              'requestsNum': response.data[i]['requestsNum']
            });
          }
          this.totalThree = this.tableDataRes.length;
        });
      },
      // 弹窗的分页-当前页改变
      handleCurrentChange(val) {
        this.currentPage = val
        this.searchList()
      },
      // 重置后列表恢复，输入框清空
      reset() {
        this.sysList = this.data
        //重置后输入框清空
        this.searchData = ""
        this.dialogData()
      },
      // 搜索过滤数据
      search() {
        this.currentPage = 1
        let qs = require('qs');
        let information = {"systemid": "System"};
        this.$axios.post('/monitorCon/system/userProject/queryProject', qs.stringify(information)).then((response) => {
          this.sysList = [];
          for (let i = 0; i < response.data.length; i++) {
            this.sysList.push({
              'sysCode': response.data[i]['projectid'],
              'sysName': response.data[i]['projectname']
            });
          }
          // 获取数据之后的实际分页
          this.total = this.sysList.length;
          this.data = this.sysList
          this.searchList()
        });
        //如果内容为空，则弹出提示
        if (this.searchData === "") {
          alert('系统不能为空，请重新输入')
        }
      },
      // 处理数据,进行搜索
      searchList() {
        // es6过滤得到满足搜索条件的展示数据list
        let sysList = this.data.filter((item) =>
          item.sysName.includes(this.searchData) || item.sysCode.includes(this.searchData)
        )
        this.sysList = sysList.filter((item, index) =>
          index < this.currentPage * this.pageSize && index >= this.pageSize * (this.currentPage - 1)
        )
        this.total = sysList.length
      },
      //折线图设置
      drawLine() {
        //通过系统名称和指标类型获取子系统ID和名称，将子系统名称存到一个数组中，为了展示图例

        let myChart = this.$echarts.init(document.getElementById('myChart'));
        if (this.valueOne === 'System' && this.nowSysCode != null) {
          this.nowSysCode = this.ipCode
        }

        // if (this.indexText!= null) {
        //   this.nowSysCode = this.$route.params.idOne
        // }

        let qs = require('qs');
        //磁盘空间，cpu使用率，内存使用率
        let information = {
          "eqpIp": this.valueThree,
          "appCode": this.ipCode,
          "type": this.valueTwoCopy,
          "timeType": this.valueFour,
          "starDate": this.startDate,
          "endDate": this.endDate
        };
        //错误率和应用响应时间
        let informationOne = {
          "appCode": this.nowSysCode,
          "type": this.valueTwo,
          "timeType": this.valueFour,
          "starDate": this.startDate,
          "endDate": this.endDate
        };
        //FullGC次数和数据源连接使用率维度
        let informationOnly = {
          "appCode": this.nowSysCode,
          "timeType": this.valueFour,
          "starDate": this.startDate,
          "endDate": this.endDate
        };
        //DB吞吐率维度
        let informationDB = {
          "appCode": this.nowSysCode,
          "type": this.valueDB,
          "timeType": this.valueFour,
          "starDate": this.startDate,
          "endDate": this.endDate
        }
        let LineData = [];
        let LineDataTwo = [];
        let LineDataThree = [];
        let LineDataFour = [];
        let minDataY = [];
        let dataY = [];
        let moreLine = [];
        let legendName = []
        let legendId = []
        let temp = []
        // let legend = ['增', '删', '改', '查']
        // let nameOne = []
        // let nameTwo = []
        // let nameThree = []
        // let nameFour = []
        myChart.showLoading();
        //当维度为db吞吐率时，展示四条折线图的图例
        if (this.valueOne === 'System' && this.valueTwo === 'OTHER') {
          // nameOne = legend[0]
          // nameTwo = legend[1]
          // nameThree = legend[2]
          // nameFour = legend[3]
        }
        //如果为设备级时，获取磁盘空间，CPU使用率，内存使用率三个维度的折线图
        //如果选择按时间查看，则x轴展示不带日期，如果按照日期查看，则x轴展示带日期
        if (this.valueOne === 'Equipment' && this.valueData === null) {
          this.$axios.post('/monitorCon/information/query', qs.stringify(information)).then((response) => {
            for (let i = 0; i < response.data.length; i++) {
              LineData.push(response.data[i].value);
            }
            for (let i = 0; i < response.data.length; i++) {
              minDataY.push(response.data[i].controlTime);
            }
            minDataY.forEach(item => {
              dataY.push(item.split(' ')[1])
            })
            temp = {
              type: "line",
              data: LineData,
              smooth: true,
              barWidth: '20%',
              showSymbol: true,
              symbol: 'circle',     //折点设定为实心点
              symbolSize: 5,   //设定实心点的大小
              itemStyle: {
                color: 'rgb(255, 70, 131)',
                normal: {
                  color: '#66bded', //折点颜色
                  lineStyle: {
                    color: '#43abe9' //折线颜色
                  }
                }
              },
              //设置折线区域的可渐变颜色
              areaStyle: {
                color: new this.$echarts.graphic.LinearGradient(0, 0, 0, 1, [{
                  offset: 0,
                  color: 'rgb(109,234,237)'
                }, {
                  offset: 1,
                  color: 'rgb(67,171,233)'
                }])
              },
            };
            option.series.push(temp)
            option.xAxis[0].data = dataY
            // console.log(option.series)
            setTimeout(() => {  //为了让加载动画效果明显,这里加入了setTimeout,实现800ms延时
              myChart.hideLoading()
            }, 800)
            myChart.setOption(option, true);
            // console.log(response)
          });
        }
        if (this.valueOne === 'Equipment' && this.valueData != null) {
          this.$axios.post('/monitorCon/information/query', qs.stringify(information)).then((response) => {
            for (let i = 0; i < response.data.length; i++) {
              LineData.push(response.data[i].value);
            }
            for (let i = 0; i < response.data.length; i++) {
              dataY.push(response.data[i].controlTime);
            }
            temp = {
              type: "line",
              data: LineData,
              smooth: true,
              barWidth: '20%',
              showSymbol: true,
              symbol: 'circle',     //折点设定为实心点
              symbolSize: 5,   //设定实心点的大小
              itemStyle: {
                color: 'rgb(255, 70, 131)',
                normal: {
                  color: '#66bded', //折点颜色
                  lineStyle: {
                    color: '#43abe9' //折线颜色
                  }
                }
              },
              //设置折线区域的可渐变颜色
              areaStyle: {
                color: new this.$echarts.graphic.LinearGradient(0, 0, 0, 1, [{
                  offset: 0,
                  color: 'rgb(109,234,237)'
                }, {
                  offset: 1,
                  color: 'rgb(67,171,233)'
                }])
              },
            };
            option.series.push(temp)
            option.xAxis[0].data = dataY
            setTimeout(() => {  //为了让加载动画效果明显,这里加入了setTimeout,实现800ms延时
              myChart.hideLoading()
            }, 800)
            myChart.setOption(option, true);
            // console.log(response)
          });
        }

        //如果为系统级时，获取维度是错误率和应用响应时间的折线图
        if (this.valueOne === 'System' && this.valueTwo === 'E' || this.valueOne === 'System' && this.valueTwo === 'R') {
          if (this.childSystem != null) {
            this.childSystem = []
          }
          if (legendId != null) {
            legendId = []
          }
          let informationNew = {"appCode": this.nowSysCode, "type": this.valueTwo};
          this.$axios.post('/monitorCon/applyError/queryMoudleId', qs.stringify(informationNew)).then((response) => {
            // console.log(response)
            for (let i = 0; i < response.data.length; i++) {
              this.childSystem.push({
                'moudleId': response.data[i]['moudleId'],
                'moudleName': response.data[i]['moudleName']
              });
              legendId.push(this.childSystem[i].moudleId)
              legendName.push(this.childSystem[i].moudleName)
            }
            console.log(legendName)
          })
          this.$axios.post('/monitorCon/applyError/query', qs.stringify(informationOne)).then((response) => {
            for (let j = 0; j < legendId.length; j++) {
              let r, q, z = `data_${j}`
              r = [];
              q = [];
              z = legendName[j]
              for (let i = 0; i < response.data.length; i++) {
                if (legendId[j] === response.data[i].moudleId) {
                  r.push(response.data[i].value)
                  q.push(response.data[i].controlTime)
                }
              }
              // console.log(z);
              temp = {
                type: "line",
                data: r,
                name: z,
                // smooth: true,
                barWidth: '20%',
                showSymbol: true,
                symbol: 'circle',     //折点设定为实心点
                symbolSize: 5,   //设定实心点的大小

              };
              option.series.push(temp)
              option.xAxis[0].data = q
            }
            // for (let i = 0; i < response.data.length; i++) {
            //   minDataY.push(response.data[i].controlTime);
            // }
            // minDataY.forEach(item => {
            //   dataY.push(item.split(' ')[1])
            // })
            // console.log(response)
            setTimeout(() => {  //为了让加载动画效果明显,这里加入了setTimeout,实现800ms延时
              myChart.hideLoading()
            }, 800)
            myChart.setOption(option, true);

          });
        }

        //如果为系统级时，获取维度是吞吐率的折线图
        if (this.valueOne === 'System' && this.valueTwo === 'APPLY') {
          let informationNew = {"appCode": this.nowSysCode, "type": this.valueTwo};
          this.$axios.post('/monitorCon/through/queryMoudleId', qs.stringify(informationNew)).then((response) => {
            console.log(response)
            if (this.childSystem != null) {
              this.childSystem = []
            }
            if (legendId != null) {
              legendId = []
            }
            for (let i = 0; i < response.data.length; i++) {
              this.childSystem.push({
                'moudleId': response.data[i]['moudleId'],
                'moudleName': response.data[i]['moudleName']
              });
              legendId.push(this.childSystem[i].moudleId)
              legendName.push(this.childSystem[i].moudleName)
              // console.log(this.childSystem)
            }
            console.log(legendName)
          })
          this.$axios.post('/monitorCon/through/query', qs.stringify(informationOne)).then((response) => {
            console.log(response)
            for (let j = 0; j < legendId.length; j++) {
              let r, q, z = `data_${j}`
              r = [];
              q = [];
              z = legendName[j]
              for (let i = 0; i < response.data.length; i++) {
                if (legendId[j] === response.data[i].moudleId) {
                  r.push(response.data[i].throughput)
                  q.push(response.data[i].controlTime)
                }
              }
              temp = {
                type: "line",
                data: r,
                name: z,
                // smooth: true,
                barWidth: '20%',
                showSymbol: true,
                symbol: 'circle',     //折点设定为实心点
                symbolSize: 5,   //设定实心点的大小

              };
              option.series.push(temp)
              option.xAxis[0].data = q
            }
            setTimeout(() => {  //为了让加载动画效果明显,这里加入了setTimeout,实现800ms延时
              myChart.hideLoading()
            }, 800)
            myChart.setOption(option, true);
            // console.log(response)
          });
        }
        //如果为系统级时，获取维度是DB吞吐率的折线图
        if (this.valueOne === 'System' && this.valueTwo === 'OTHER') {
          let informationNew = {"appCode": this.nowSysCode, "type": this.valueDB};
          this.$axios.post('/monitorCon/through/queryMoudleId', qs.stringify(informationNew)).then((response) => {
            console.log(response)
            if (this.childSystem != null) {
              this.childSystem = []
            }
            if (legendId != null) {
              legendId = []
            }
            for (let i = 0; i < response.data.length; i++) {
              this.childSystem.push({
                'moudleId': response.data[i]['moudleId'],
                'moudleName': response.data[i]['moudleName']
              });
              legendId.push(this.childSystem[i].moudleId)
              legendName.push(this.childSystem[i].moudleName)

              console.log(legendName)
              // console.log(this.childSystem)
            }
          })
          this.$axios.post('/monitorCon/through/query', qs.stringify(informationDB)).then((response) => {
            console.log(response)
            for (let j = 0; j < legendId.length; j++) {
              let r, q, z = `data_${j}`
              r = [];
              q = [];
              z = legendName[j]
              for (let i = 0; i < response.data.length; i++) {
                // console.log(legendId[j])
                // console.log(response.data[i].moudleId)
                if (legendId[j] === response.data[i].moudleId) {
                  r.push(response.data[i].throughput)
                  q.push(response.data[i].controlTime)
                }
              }
              temp = {
                type: "line",
                data: r,
                name: z,
                // smooth: true,
                barWidth: '20%',
                showSymbol: true,
                symbol: 'circle',     //折点设定为实心点
                symbolSize: 5,   //设定实心点的大小

              };
              option.series.push(temp)
              option.xAxis[0].data = q
            }
            setTimeout(() => {  //为了让加载动画效果明显,这里加入了setTimeout,实现800ms延时
              myChart.hideLoading()
            }, 800)
            myChart.setOption(option, true);
            // console.log(response)
          });
        }

        //如果维度为DB吞吐率时，获取数据的type类型，便于展示四条折线图
        // if (this.valueOne === 'System' && this.valueTwo === 'OTHER') {
        //   this.$axios.post('/monitorCon/through/query', qs.stringify(informationOne)).then((response) => {
        //     for (let i = 0; i < response.data.length; i++) {
        //       let item = {
        //         typeNow: response.data[i].type
        //       }
        //       moreLine.push(item);
        //     }
        //     myChart.setOption(option, true);
        //     console.log(response)
        //     for (let i = 0; i < response.data.length; i++) {
        //       if (moreLine[i].typeNow === 'INSERT') {
        //         LineData.push(response.data[i].throughput);
        //         dataY.push(response.data[i].controlTime);
        //       }
        //       if (moreLine[i].typeNow === 'DELETE') {
        //         LineDataTwo.push(response.data[i].throughput);
        //       }
        //       if (moreLine[i].typeNow === 'UPDATE') {
        //         LineDataThree.push(response.data[i].throughput);
        //       }
        //       if (moreLine[i].typeNow === 'SELECT') {
        //         LineDataFour.push(response.data[i].throughput);
        //       }
        //     }
        //     setTimeout(() => {  //为了让加载动画效果明显,这里加入了setTimeout,实现800ms延时
        //       myChart.hideLoading()
        //     }, 800)
        //     myChart.setOption(option, true);
        //     console.log(response)
        //     // console.log(moreLine)
        //   });
        // }

        //如果为系统级时，获取维度是FullGC次数的折线图
        if (this.valueOne === 'System' && this.valueTwo === 'Full') {
          let informationNew = {"appCode": this.nowSysCode};
          this.$axios.post('/monitorCon/fullGc/queryMoudleId', qs.stringify(informationNew)).then((response) => {
            // console.log(response)
            if (this.childSystem != null) {
              this.childSystem = []
            }
            if (legendId != null) {
              legendId = []
            }
            for (let i = 0; i < response.data.length; i++) {
              this.childSystem.push({
                'moudleId': response.data[i]['moudleId'],
                'moudleName': response.data[i]['moudleName']
              });
              legendId.push(this.childSystem[i].moudleId)
              legendName.push(this.childSystem[i].moudleName)
              // console.log(this.childSystem)
            }
            console.log(legendName)
          })
          this.$axios.post('/monitorCon/fullGc/query', qs.stringify(informationOnly)).then((response) => {
            for (let j = 0; j < legendId.length; j++) {
              let r, q, z = `data_${j}`
              r = [];
              q = [];
              z = legendName[j]
              for (let i = 0; i < response.data.length; i++) {
                if (legendId[j] === response.data[i].moudleId) {
                  r.push(response.data[i].value)
                  q.push(response.data[i].controlTime)
                }
              }
              temp = {
                type: "line",
                data: r,
                name: z,
                // smooth: true,
                barWidth: '20%',
                showSymbol: true,
                symbol: 'circle',     //折点设定为实心点
                symbolSize: 5,   //设定实心点的大小
              };
              option.series.push(temp)
              option.xAxis[0].data = q
            }
            setTimeout(() => {  //为了让加载动画效果明显,这里加入了setTimeout,实现800ms延时
              myChart.hideLoading()
            }, 800)
            myChart.setOption(option, true);
            // console.log(response)
          });
        }
        //如果为系统级时，获取维度是数据源连接使用率的折线图
        if (this.valueOne === 'System' && this.valueTwo === 'Data') {
          let informationNew = {"appCode": this.nowSysCode};
          this.$axios.post('/monitorCon/dataBase/queryMoudleId', qs.stringify(informationNew)).then((response) => {
            if (this.childSystem != null) {
              this.childSystem = []
            }
            if (legendId != null) {
              legendId = []
            }
            for (let i = 0; i < response.data.length; i++) {
              this.childSystem.push({
                'moudleId': response.data[i]['moudleId'],
                'moudleName': response.data[i]['moudleName']
              });
              legendId.push(this.childSystem[i].moudleId)
              legendName.push(this.childSystem[i].moudleName)
              // console.log(this.childSystem)
            }
            console.log(legendName)
          })
          this.$axios.post('/monitorCon/dataBase/query', qs.stringify(informationOnly)).then((response) => {
            console.log(response)
            for (let j = 0; j < legendId.length; j++) {
              let r, q, z = `data_${j}`
              r = [];
              q = [];
              z = legendName[j]
              for (let i = 0; i < response.data.length; i++) {
                if (legendId[j] === response.data[i].moudleId) {
                  r.push(response.data[i].value)
                  q.push(response.data[i].controlTime)
                }
              }
              temp = {
                type: "line",
                data: r,
                name: z,
                // smooth: true,
                barWidth: '20%',
                showSymbol: true,
                symbol: 'circle',     //折点设定为实心点
                symbolSize: 5,   //设定实心点的大小

              };
              option.series.push(temp)
              option.xAxis[0].data = q
            }
            setTimeout(() => {  //为了让加载动画效果明显,这里加入了setTimeout,实现800ms延时
              myChart.hideLoading()
            }, 800)
            myChart.setOption(option, true);
            // console.log(response)
          });
        }
        let option = {
          title: {
            show: true,
            text: this.obj.labelTwo,//折线图的标题
            x: '50',
            y: 'top',
            textAlign: null,//水平对齐方式，默认根据x设置自动调整，可选为： left' | 'right' | 'center
            textStyle: {
              fontFamily: 'Arial',
              fontSize: 18,
              fontStyle: 'normal',
              fontWeight: 'normal',
            },
            zlevel: 0,//一级层叠控制。默认0,每一个不同的zlevel将产生一个独立的canvas，相同zlevel的组件或图标将在同一个canvas上渲染。zlevel越高越靠顶层，canvas对象增多会消耗更多的内存和性能，并不建议设置过多的zlevel，大部分情况可以通过二级层叠控制z实现层叠控制。
            z: 6,//二级层叠控制，默认6,同一个canvas（相同zlevel）上z越高约靠顶层。
          },
          legend: {
            width: 800,
            left: 230,
          },
          tooltip: {
            trigger: 'axis'
          },
          grid: {
            x: 60,
            y: 50,
            right: 80,
          },
          xAxis: [{
            type: 'category',
            boundaryGap: false,
            data: '',
          }],
          yAxis: {
            type: 'value',
            splitLine: {show: false},
            scale: true, /*按比例显示*/
            axisLabel: {
              show: true,
              interval: 'auto',
              formatter: '{value}'
              // formatter: '{value} %'
            },
            show: true,
            // max: 100,
            splitNumber: 10,
          },
          dataZoom: [
            {
              type: "slider",
              textStyle: false,//不显示左右两边的数据
              backgroundColor: "rgb(109,234,237,0.5)",
              fillerColor: "rgb(67,171,233,0.5)",
              handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.3v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',
              handleSize: '100%',
              handleStyle: {
                color: '#fff',
                shadowBlur: 3,
                shadowColor: 'rgba(0, 0, 0, 0.6)',
                shadowOffsetX: 2,
                shadowOffsetY: 2
              },
              realtime: true, //拖动滚动条时是否动态的更新图表数据
              height: 20, //滚动条高度
              start: 0, //滚动条开始位置（共100等份）
              end: 100, //结束位置（共100等份）
            }

          ],
          // {
          //   name: nameOne,
          //     data: LineData,
          //   type: 'line',
          //   smooth: true,
          //   barWidth: '20%',
          //   showSymbol: true,
          //   symbol: 'circle',     //折点设定为实心点
          //   symbolSize: 5,   //设定实心点的大小
          //   itemStyle: {
          //   color: 'rgb(255, 70, 131)',
          //     normal: {
          //     color: '#66bded', //折点颜色
          //       lineStyle: {
          //       color: '#43abe9' //折线颜色
          //     }
          //   }
          // },
          //   //设置折线区域的可渐变颜色
          //   areaStyle: {
          //     color: new this.$echarts.graphic.LinearGradient(0, 0, 0, 1, [{
          //       offset: 0,
          //       color: 'rgb(109,234,237)'
          //     }, {
          //       offset: 1,
          //       color: 'rgb(67,171,233)'
          //     }])
          //   },
          // },
          // {
          //   name: nameTwo,
          //     data: LineDataTwo,
          //   type: 'line',
          //   smooth: true,
          //   showSymbol: true,
          //   symbol: 'circle',     //折点设定为实心点
          //   symbolSize: 6,   //设定实心点的大小
          //   itemStyle: {
          //   normal: {
          //     color: '#ec8456', //折点颜色
          //       lineStyle: {
          //       color: '#ec6739' //折线颜色
          //     }
          //   }
          // },
          //   // areaStyle: {
          //   // color: new this.$echarts.graphic.LinearGradient(0, 0, 0, 1, [{
          //   //   offset: 0,
          //   //   color: '#ec8456'
          //   // }, {
          //   //   offset: 1,
          //   //   color: '#ec6739'
          //   // }])
          //   // },
          // },
          // {
          //   name: nameThree,
          //     data: LineDataThree,
          //   type: 'line',
          //   smooth: true,
          //   showSymbol: true,
          //   symbol: 'circle',     //折点设定为实心点
          //   symbolSize: 6,   //设定实心点的大小
          //   itemStyle: {
          //   normal: {
          //     color: '#5fcd7b', //折点颜色
          //       lineStyle: {
          //       color: '#5fcd7b' //折线颜色
          //     }
          //   }
          // },
          //   // areaStyle: {
          //   // color: new this.$echarts.graphic.LinearGradient(0, 0, 0, 1, [{
          //   //   offset: 0,
          //   //   color: 'rgb(86, 236, 86)'
          //   // }, {
          //   //   offset: 1,
          //   //   color: 'rgb(60, 236, 162)'
          //   // }])
          //   // },
          // },
          // {
          //   name: nameFour,
          //     data: LineDataFour,
          //   type: 'line',
          //   smooth: true,
          //   showSymbol: true,
          //   symbol: 'circle',     //折点设定为实心点
          //   symbolSize: 6,   //设定实心点的大小
          //   itemStyle: {
          //   normal: {
          //     color: '#ECED2A', //折点颜色
          //       lineStyle: {
          //       color: '#EDD519' //折线颜色
          //     }
          //   }
          // },
          //   // areaStyle: {},
          // }
          series: [],
        }
        //为echarts对象加载数据

        // window.onresize = function () {
        //   myChart.resize();
        // }
      }
      ,
      // 根据监控项切换监控维度
      togDisabled(valueOne, valueTwoCopy) {
        this.changeDisabled = !this.changeDisabled;
        this.isActive = !this.isActive
        this.isActiveCopy = !this.isActiveCopy
        //如果切换监控项分类，在设备级时不选系统时，在切换到系统时，input框为空，不传系统编号
        if (this.valueOne === 'System' && this.nowSysCode === '') {
          this.indexText = ''
        } else {
          //如果切换监控项分类，在设备级时选了系统时，在切换到系统时，传设备级时选择的系统编号
          this.nowSysCode = this.ipCode
        }
        if (this.valueOne === 'Equipment') {
          //解决如果选择设备级时，默认显示磁盘空间时加载不出标题的问题
          this.obj = this.optionsTwoCopy.find((item) => {
            return item.valueTwoCopy === valueTwoCopy;
          });
          this.changeDisabledTime = false;
          //选择设备维度时，默认第一个系统
          // this.getEqpId()
          this.displayA = 'block'
          this.displayB = 'none'
          this.displayC = 'none'
          this.displayD = 'none'
          this.valueTwoCopy = 'D'
          this.valueData = null
          this.startDate = ''
          this.endDate = ''
          this.valueFour = 'TimeOne'
          //传给后台的默认第一个系统的对应系统编号，根据系统编号查询该系统的所有设备IP
          this.ipCode = this.sysList[0].sysCode
          this.indexText = this.sysList[0].sysName

          //选择设备级时，默认第一个系统的第一个设备Ip
          let qs = require('qs');
          let informationOne = {"systemId": this.ipCode}
          this.$axios.post('/monitorCon/system/userProject/queryProjectIp', qs.stringify(informationOne)).then((response) => {
            this.optionsThree = []
            for (let i = 0; i < response.data.length; i++) {
              this.optionsThree.push({
                'labelThree': response.data[i]['IP']
              });
            }
            //选择系统时，设备IP默认显示第一个
            this.valueThree = this.optionsThree[0].labelThree;
            this.drawLine()
          });
        }
        else {
          this.batchData()
          this.changeDisabledTime = true;
          // this.indexText = ''
          //设备级时系统显示设备IP，系统级时设备IP清空
          this.valueThree = ''
          this.displayA = 'none'
          this.displayB = 'block'
          this.valueTwo = 'MonitorSeven'
        }
      }
      ,
      change2(valueTwo) {
        // this.getChildCode()

        //改变选择框的值时，折线图的标题跟着改变
        this.obj = this.optionsTwo.find((item) => {
          return item.valueTwo === valueTwo;
        });

        //改变监控维度时，日期选择器清空
        // this.valueData = null
        // this.startDate = ''
        // this.endDate = ''
        // this.valueFour = 'TimeOne'
        if (this.valueOne === 'System' && this.valueTwo === 'OTHER') {
          this.selectDB = 'block'
        } else {
          this.selectDB = 'none'
        }
        if (this.valueTwo === 'APPLY' || this.valueTwo === 'E' || this.valueTwo === 'OTHER' || this.valueTwo === 'R' || this.valueTwo === 'Full' || this.valueTwo === 'Data') {
          this.drawLine()
          this.displayA = 'block'
          this.displayB = 'none'
          this.displayC = 'none'
          this.displayD = 'none'
          this.changeDisabledTime = false;
        } else if (this.valueTwo === "MonitorSeven") {
          this.batchData()
          this.displayA = 'none'
          this.displayB = 'block'
          this.displayC = 'none'
          this.displayD = 'none'
          this.changeDisabledTime = true;
        } else if (this.valueTwo === 'MonitorTwelve') {
          this.slowTop()
          this.changeDisabledTime = false;
          // this.indexText = ''
          //设备级时系统显示设备IP，系统级时设备IP清空
          this.valueThree = ''
          this.displayA = 'none'
          this.displayB = 'none'
          this.displayC = 'block'
          this.displayD = 'none'
          // this.valueTwo = 'MonitorSeven'
        } else if (this.valueTwo = 'MonitorNine') {
          this.dataBase()
          this.changeDisabledTime = false;
          this.valueThree = ''
          this.displayA = 'none'
          this.displayB = 'none'
          this.displayC = 'none'
          this.displayD = 'block'
        } else {
          this.displayA = 'none'
          this.displayB = 'block'
          this.displayC = 'none'
          this.changeDisabledTime = false;
        }
      }
      ,
      //系统级下不选择系统就选择监控维度出弹窗
      warnSystem() {
        // console.log(this.nowSysCode)
        if (this.nowSysCode === '') {
          this.$confirm('请您先选择系统', '提示', {
            confirmButtonText: '确定',
            cancelButtonText: '取消',
            type: 'warning'
          }).then(() => {
            // this.centerDialog = true
          }).catch(() => {

          })
        }
      }
      ,
      change2Copy(valueTwoCopy) {
        this.obj = this.optionsTwoCopy.find((item) => {
          return item.valueTwoCopy === valueTwoCopy;
        });
        //改变监控维度时，日期选择器清空
        // this.valueData = null
        if (this.valueTwoCopy === 'D' || this.valueTwoCopy === 'C' || this.valueTwoCopy === 'M') {
          this.displayA = 'block'
          this.displayB = 'none'
          this.drawLine()
        } else {
          this.displayA = 'none'
          this.displayB = 'block'
        }
      }
      ,
      change3(valueThree) {
        this.drawLine()
      }
      ,
      change4(valueFour) {
        if (this.valueOne === 'System' && this.valueData != null) {
          this.valueData = null
          this.startDate = ''
          this.endDate = ''
        }
        if (this.valueTwo === 'MonitorTwelve') {
          this.slowTop()
        } else if (this.valueTwo === 'MonitorNine') {
          this.dataBase()
        } else {
          this.drawLine()
        }
      }
      ,
      changeDB() {
        this.drawLine()
      },
      //当前页改变时会触发
      handleCurrentChangeOne(val) {
        this.currentPageOne = val;
      }
      ,
      handleSizeChangeOne(val) {
        this.pageSizeOne = val;
      }
      ,
      //将弹窗选择的值映射到输入框内
      choose(index, sysList) {

        // this.$route.params.idOne=''
        // if(this.$route.params.idOne=''){
        //   this.nowSysCode=this.ipCode
        // }
        this.centerDialog = false;
        this.indexText = sysList[index].sysName;
        //当前选中系统的对应编号
        this.nowSysCode = sysList[index].sysCode;
        if (this.valueTwo === 'MonitorSeven') {
          this.batchData()
        }
        if (this.valueTwo === 'MonitorTwelve') {
          this.slowTop()
        }

        // this.getEqpId()
        if (this.valueThree != null) {
          this.valueThree = null
        }
        //选择系统时，系统对应的设备IP的第一个
        this.ipCode = sysList[index].sysCode
        //选择设备级时，默认第一个系统的第一个设备Ip
        let qs = require('qs');
        let informationOne = {"systemId": this.ipCode}
        this.$axios.post('/monitorCon/system/userProject/queryProjectIp', qs.stringify(informationOne)).then((response) => {
          this.optionsThree = []
          for (let i = 0; i < response.data.length; i++) {
            this.optionsThree.push({
              'labelThree': response.data[i]['IP']
            });
          }
          //选择系统时，设备IP默认显示第一个
          this.valueThree = this.optionsThree[0].labelThree;
          this.drawLine()
        });
        // this.drawLine()
        if (this.childSystem != null) {
          this.childSystem = []
        }
        let informationNew = {"appCode": this.nowSysCode, "type": this.valueTwo};
        this.$axios.post('/monitorCon/applyError/queryMoudleId', qs.stringify(informationNew)).then((response) => {
          for (let i = 0; i < response.data.length; i++) {
            this.childSystem.push({
              'moudleId': response.data[i]['moudleId'],
              'moudleName': response.data[i]['moudleName']
            });
          }
          // console.log(this.childSystem)
        });
      }
      ,
      //清空选择系统的输入框
      empty() {
        this.valueData = null
        this.startDate = ''
        this.endDate = ''
        //从总览页传递参数进来，若清空输入框，则参数也清空
        // this.$route.params.idOne=''
        if (this.valueOne === 'System' && this.valueTwo === 'MonitorSeven') {
          this.indexText = '';
          this.nowSysCode = '';
          this.batchData()
          // this.$axios.post('/monitorCon/dmMsg/query').then((response) => {
          //   this.tableData = [];
          //   for (let i = 0; i < response.data.length; i++) {
          //     if (response.data[i]['isSuccess'] === 'Y') {
          //       response.data[i]['isSuccess'] = '成功'
          //     } else {
          //       response.data[i]['isSuccess'] = '失败'
          //     }
          //     this.tableData.push({
          //       'appCode': response.data[i]['appCode'],
          //       // 'appName': response.data[i]['appName'],
          //       'jobId': response.data[i]['jobId'],
          //       'jobName': response.data[i]['jobName'],
          //       'startTime': response.data[i]['startTime'],
          //       'endTime': response.data[i]['endTime'],
          //       'runTime': response.data[i]['runTime'],
          //       'isSuccess': response.data[i]['isSuccess']
          //     });
          //   }
          //   // 获取数据之后的实际分页
          //   this.totalOne = this.tableData.length;
          // });
        }

      }
    },
    computed: {}
    ,
    mounted() {
      this.batchData()
      this.dialogData()
      // this.dataBase()
      // console.log(this.$route.params.idOne)
    }
    ,
    created() {
    }
  }
</script>

<style scoped>

  /*去掉el-table的多余横线*/
  .el-table::before {
    height: 0 !important;
  }

  .monitor_msg >>> .great {
    display: none;
  }

  /*.main-content {*/
  /*margin: 0 auto;*/
  /*width: 79.2vw;*/
  /*min-width: 1060px;*/
  /*}*/

  /*.main-contentOne {*/
  /*margin: 0 auto;*/
  /*width: 79.2vw;*/
  /*min-width: 1060px;*/
  /*}*/

  /*主体背景*/
  .monitor_main {
    min-height: 540px;
    height: 87vh;
    min-width: 1159px;
    background-color: #f6f7ff
  }

  .monitor_main p {
    display: inline-block;
    color: #444;
    font-size: 12px;
    margin-top: 2.5vh;
    margin-left: 18px;
  }

  .monitor_main .comBack {
    float: right;
    height: 3vh;
    margin-top: 1.5vh;
    line-height: 0;
    margin-right: 18px;
  }

  /*上半部分*/
  .monitor_msg >>> .el-input__inner {
    height: 36px;
  }

  .monitor_msg >>> .el-input {
    padding-top: 4px;
  }

  .monitor_msg {
    min-height: 110px;
    height: 10vh;
    padding-top: 2.7vh;
    padding-bottom: 0.5vh;
    margin: 2vh 18px 0;
    background-color: #fff;
    box-shadow: 0 0 8px 3px rgba(0, 0, 0, 0.1);
  }

  .monitor_msg i {
    display: inline-block;
    /*margin-left: 42px;*/
  }

  .monitor_msg .demonstration {
    margin-left: 11px;
  }

  .monitor_msg .three {
    margin-top: 22px;
  }

  .monitor_msg .four {
    margin-top: 22px;
  }

  .monitor_msg .five {
    margin-left: 24px;
    margin-top: 22px;
  }

  /*弹窗的输入框样式*/
  .diaBox .search {
    float: left;
    width: 270px;
    margin: -2px 0 16px 14px;
  }

  /*input的placeholder样式*/
  input::-webkit-input-placeholder {
    color: #aab2bd;
    font-size: 14px;
  }

  /*日期选择的部分*/
  .monitor_msg >>> .el-range-separator {
    line-height: 28px !important;
  }

  /*选择系统的部分*/
  .monitor_msg .system {
    width: 182px;
    height: 32px;
    padding-right: 20px;
    border: 1px solid #DCDFE6;
    border-radius: 4px;
    font-size: 14px;
    color: #606266;
    padding-left: 13px;
    background-color: #fff;
    cursor: pointer;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis
  }

  .monitor_msg .el-icon-circle-close {
    margin-left: -28px !important;
    font-size: 16px;
    color: #C0C4CC;
    z-index: 3;
    display: inline-block;
    cursor: pointer;
  }

  /*选择系统的弹窗样式*/
  .monitor_msg >>> .el-dialog__header {
    height: 30px;
    background-color: #66bded;
    padding: 7px 20px 0 !important;
  }

  .monitor_msg >>> .el-dialog__title {
    color: #fff;
    font-size: 14px;
  }

  .monitor_msg >>> .el-dialog__headerbtn {
    top: 12px;
  }

  .monitor_msg >>> .el-dialog--center .el-dialog__body {
    padding-top: 15px;
  }

  .monitor_msg >>> .el-dialog__footer {
    padding-top: 0;
  }

  .monitor_msg >>> .el-dialog__headerbtn .el-dialog__close {
    color: #fff;
  }

  /*选择系统的弹窗表格*/
  .el-dialog__wrapper {
    top: -65px;
  }

  .diaBox .el-table >>> .cell {
    text-align: center;
    line-height: 16px;
  }

  .monitor_msg >>> .el-table td, .el-table th {
    padding: 1px 0 !important;
  }

  .diaBox >>> .el-input__inner {
    height: 30px;
  }

  .monitor_msg >>> .el-input__suffix {
    top: 4px;
  }

  /*使选择器的文字在ie上下居中*/
  .monitor_msg >>> .el-input__inner {
    line-height: 29px !important;
  }

  /*下半部分*/
  .monitor_echarts {
    min-height: 310px;
    height: 52vh;
    min-width: 1060px;
    margin: 4vh 18px 0;
    background-color: #fff;
    box-shadow: 0 0 8px 3px rgba(0, 0, 0, 0.1);
  }

  .monitor_echarts >>> .tableHead .cell {
    font-weight: bold;
  }

  .monitor_echarts >>> .cell {
    line-height: 16px !important;
  }

  /*.divDB {*/
  /*height: 6vh;*/
  /*width: 172vh;*/
  /*}*/
  .divDB >>> .el-input__inner {
    height: 33px;
    width: 217px;
  }

  .divDB >>> .el-input__icon {
    margin-right: 25px;
    line-height: 0 !important;
  }

  .divDB >>> .el-input__suffix {
    right: -23px;
  }

  .divDB >>> .el-select {
    width: 217px;
    float: right;
    margin-right: 3vh;
  }

  /*.divDB >>> .el-popper{*/
  /*top: 320px!important;*/
  /*right: 16px!important;*/
  /*min-width: 217px!important;*/
  /*}*/

  /*上半部分日期选择器的框*/
  .el-date-editor--daterange.el-input, .el-date-editor--daterange.el-input__inner, .el-date-editor--timerange.el-input, .el-date-editor--timerange.el-input__inner {
    width: 230px;
  }

  .monitor_msg >>> .el-date-editor .el-range__icon {
    line-height: 29px !important;
  }

  /*日期框的日期显示不全，调整宽度*/
  .monitor_msg >>> .el-date-editor .el-range-input {
    width: 45% !important;
  }
</style>
